{"version":3,"sources":["ClickArea/PureClickArea.js","ClickArea/index.js","ClickArea/useSingleTimer.js","Counter/PureCounter.js","Counter/index.js","ResetButton/index.js","common/hooks/useCount.js","Server/PureServer.js","StartLeftOrRight/index.js","App.js","serviceWorker.js","index.js"],"names":["PureClickArea","_ref","_ref$isTouched","isTouched","_ref$onClick","onClick","identity","children","react_default","a","createElement","className","ClickArea","fn","timeout","deps","_useState","useState","_useState2","Object","slicedToArray","isTouchedS","setIsTouched","undefined","useEffect","timerId","setTimeout","clearTimeout","clickHandler","useCallback","PureClickArea_PureClickArea","PureCounter","_ref$count","count","Counter","_ref$incCount","incCount","Fragment","ClickArea_ClickArea","PureCounter_PureCounter","ResetButton","useCount","initCount","setCount","PureServer","_ref$isServing","isServing","_ref$rotateRight","rotateRight","dangerouslySetInnerHTML","__html","StartLeftOrRight","_ref$setStartedLeft","setStartedLeft","data-cy","App","_useCount","_useCount2","countL","incCountL","resetL","_useCount3","_useCount4","countR","incCountR","resetR","startedLeft","leftServing","totalCount","isStartingSide","Math","floor","isLeftServing","src_StartLeftOrRight_StartLeftOrRight","PureServer_PureServer","Counter_Counter","src_ResetButton_ResetButton","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0d24d1eb.chunk.js","sourcesContent":["import React from 'react';\nimport './PureClickArea.css';\nimport { identity } from 'ramda';\n\nexport const PureClickArea = ({ isTouched = false, onClick = identity, children }) => {\n  return <div className={'ClickArea ' + (isTouched ? 'touched' : '')} onClick={onClick}>\n    {children}\n  </div>;\n};\n","import React, { useCallback, useState } from 'react';\nimport { identity } from 'ramda';\nimport { PureClickArea } from './PureClickArea';\nimport { useSingleTimer } from './useSingleTimer';\n\nexport const ClickArea = ({ isTouched = false, onClick = identity, children }) => {\n  const [isTouchedS, setIsTouched] = useState(isTouched);\n\n  useSingleTimer(() => isTouchedS && setIsTouched(false), 300, undefined);\n\n  const clickHandler = useCallback(() => {\n    onClick();\n    setIsTouched(true);\n  }, undefined);\n\n  return <PureClickArea isTouched={isTouchedS} onClick={clickHandler}>\n    {children}\n  </PureClickArea>;\n};\n","import { useEffect } from 'react';\n\nexport const useSingleTimer = (fn, timeout, deps) => {\n  useEffect(() => {\n    const timerId = setTimeout(fn, timeout);\n    return () => clearTimeout(timerId);\n  }, deps);\n};\n","import React from 'react';\nimport './PureCounter.css';\n\nexport const PureCounter = ({ count = 0 }) => {\n  return <div className='PureCounter'>\n    {count}\n  </div>;\n};\n","import React from 'react';\nimport { ClickArea } from '../ClickArea';\nimport { PureCounter } from './PureCounter';\nimport { identity } from 'ramda';\n\nexport const Counter = ({ count = 0, incCount = identity }) => <>\n  <ClickArea onClick={incCount}>\n    <PureCounter count={count}/>\n  </ClickArea>\n</>;\n","import React from 'react';\nimport { ClickArea } from '../ClickArea';\nimport { identity } from 'ramda';\nimport './ResetButton.css';\n\nexport const ResetButton = ({ onClick = identity }) => <>\n  <ClickArea onClick={onClick}>\n    <div className='button'>NEW GAME</div>\n  </ClickArea>\n</>;\n","import { useState } from 'react';\n\nexport const useCount = initCount => {\n  const [count, setCount] = useState(initCount);\n  const increment = () => setCount(count + 1);\n  const reset = () => setCount(0);\n\n  return [count, increment, reset];\n};\n","import React from 'react';\nimport './PureServer.css';\n\nexport const PureServer = ({ isServing = false, rotateRight = false }) => <>\n  <div className={'PureServer ' + (isServing ? 'is-serving ' : '') + (rotateRight ? 'rotate-right' : '')}>\n    {isServing ? 'SERVING' : <div dangerouslySetInnerHTML={{ __html: '&nbsp;' }}/>}\n  </div>\n</>;\n","import React from 'react';\nimport { identity } from 'ramda';\nimport { ClickArea } from '../ClickArea';\nimport './StartLeftOrRight.css';\n\nexport const StartLeftOrRight = ({ setStartedLeft = identity }) => <>\n  <div className='StartLeftOrRight'>\n    <ClickArea onClick={() => setStartedLeft(true)}>\n      <div className='button-content left' data-cy='start-left'>START LEFT</div>\n    </ClickArea>\n    <ClickArea onClick={() => setStartedLeft(false)}>\n      <div className='button-content' data-cy='start-right'>START RIGHT</div>\n    </ClickArea>\n  </div>\n</>;\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Counter } from './Counter';\nimport { ResetButton } from './ResetButton';\nimport { useCount } from './common/hooks/useCount';\nimport { PureServer } from './Server/PureServer';\nimport { StartLeftOrRight } from './StartLeftOrRight';\n\nconst isLeftServing = ({ startedLeft, totalCount }) => {\n  const isStartingSide = (Math.floor(totalCount / 5) % 2 === 0);\n  return startedLeft ? isStartingSide : !isStartingSide;\n};\n\nconst App = () => {\n  const [countL, incCountL, resetL] = useCount(0);\n  const [countR, incCountR, resetR] = useCount(0);\n  const [startedLeft, setStartedLeft] = useState(undefined);\n  const resetGame = () => resetL() || resetR() || setStartedLeft(undefined);\n\n  const totalCount = (countL + countR);\n\n  const leftServing = isLeftServing({ startedLeft, totalCount });\n\n  if (startedLeft === undefined) {\n    return <StartLeftOrRight setStartedLeft={setStartedLeft}/>;\n  }\n  return (\n    <div className=\"App\">\n      <div className='server' data-cy='server-left'>\n        <PureServer isServing={leftServing} rotateRight={true}/>\n      </div>\n      <div className='counter left' data-cy='counter-left'>\n        <Counter count={countL} incCount={incCountL}/>\n      </div>\n      <div className='counter' data-cy='counter-right'>\n        <Counter count={countR} incCount={incCountR}/>\n      </div>\n      <div className='resetButton' data-cy='reset-game'>\n        <ResetButton onClick={resetGame}/>\n      </div>\n      <div className='server' data-cy='server-right'>\n        <PureServer isServing={!leftServing}/>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}